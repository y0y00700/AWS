1장 ELB란? 
Elastic Load Balancer 
한줄 요약 : 트래픽(부하)을 적절하게 분배해주는 장치이다.
서버를 2대 이상 가용할 때 ELB를 필수적으로 도입.

하지만 지금은 ELB의 로드밸런서 기능을 사용하는 것이 아닌,
ELB의 부가기능인 SSL/TLS(HTTPS)를 적용시키는 방법에 대해 서술.

SSL/TLS는 쉽게 표현하자면 HTTP 를 HTTPS로 바꿔주는 인증서이다.

HTTPS? 
적용시키는 이유
1. 보안적인 이유.
데이터를 서버와 주고 받을 때 암호화를 켜서 통신을 한다.
암호화를 하지 않으면 누군가 중간에서 데이터를 가로채서 해킹 할 수 있게된다.

2. 사용자 이탈
어떤 사이트에 들어갔는데 아래와 같이 보인다면 왠지 믿음직 스럽지 못한 사이트라 생각된다.

현업에서는 대부분 웹사이트에서 HTTPS를 적용시킨다.
HTTPS 인증을 받은 웹사이트가 백엔드 서버와 통신하려면, 백엔드 서버의 주소도 HTTPS 인증을 받아야 한다.
따리서 백엔드 서버와 통신할 때도 IP주소로 통신하는게 아니라 HTTPS 인증을 받은 도메인 주소로 통신을 한다.

주로 도메인을 구성할 때 아래와 같이 많이 구성한다. 

- 웹 사이트 주소 : **`https**://jscode-edu.co.kr`
- 백엔드 API 서버 주소 : **`https**://api.jscode-edu.co.kr`

2장. ELB를 활용한 아키텍처 구성
ELB를 사용하기 전의 아키텍처는 사용자들이 EC2의 IP 주소 또는 도메인 주소에 직접 요청을 보내는구조이다.
하지만 ELB를 추가적으로 도입함으로써 사용자들이 EC2에 직접적으로 요청을 보내지 않고 ELB를 향해 요청을
보내도록 구성한다.
그래서 EC2 달았던 도메인도 ELB에 달고, HTTPS 도 ELB 의 도메인에 적용시킨다.

ex) 
as is-> client > EC2 
to be-> client > ELB > EC2 
                             ㄴ EC2 

ELB는 Load Balance 및 SSL/TLS 적용이 가능한 서비스이다.

3장. ELB 셋팅하기 - 기본 구성
로드 밸런싱  > 로드밸런서 > 로드 밸런서 생성 (생성전에 리전 확인할 것)

유형
Application Load Balancer , Network Load Balancer , Gateway Load Balancer
(체크)

로드밸런서 이름 

체계 
인터넷 경계(Public) , 내부(Private IP)

IP주소 유형
IPv4 , 듀얼스택(IPv4, IPv6)

네트워크 매핑
로드 밸런서가 어떤 가용 영역으로만 트래픽을 보낼 건지 제한하는 기능이다.
가용 영역에 제한을 두지 않고 모든 영역에 트래픽을 보내도록 설정한다.
매핑  : 전부 체크

4장. ELB 셋팅 - 보안그룹
신규 보안그룹 생성(새탭) - elb 보안 규칙

인바운드 규칙 : 모든 HTTP 요청 허용  (80)
                      모든 HTTPS 요청 허용 (443)
아웃바운드 규칙 : 안채움.

5장. ELB 셋팅 - 리스너 및 라우팅 / 헬스 체크
ELB로 들어온 요청을 어떤 EC2 인스턴스에 전달할 건지를 설정하는 부분이다.
ELB로 들어온 요청을 어떤 곳으로 전달해야 하는데, 여기서 어떤 곳을 대상 그룹(Target Group)
이라고 표현한다. 즉, ELB로 들어온 요청을 어디로 보낼지 대상 그룹을 만들어야 한다.

대상유형 -> 인스턴스 체크 
EC2에서 만든 특정 인스턴스로 트래픽을 전달할 것이기 때문에 인스턴스 옵션을 선택한다.

3. 프로토콜, IP 주소 유형, 프로토콜 버전 설정
프로토콜 : HTTP 
IP주소 유형 : IPv4
프로토콜 버전 - HTTP1
(자주 사용되는 기준)
ELB가 사용자로부터 트래픽을 받아 대상 그룹에게 어떤 방식으로 전달할지 설정하는 부분이다.

4. 상태 검사 설정하기
ELB의 부가기능으로 상태 검사(=Health Check, 헬스 체크) 기능이 있다.
이 기능은 굉장히 중요한 기능 중 하나이므로 확실하게 짚고 넘어가자.

실제 ELB로 들어온 요청을 대상 그룹에 있는 여러 EC2인스턴스로 전달하는 역할을 한다.
그런데 만약 특정 EC2 인스턴스 내에 있는 서버가 예상치 못한 에러로 고장났다면,
ELB 는 해당 고정 서버에 요청(트래픽)을 전달하는것이 비효율적인 행동이 된다.

이런 상황을 방지하기 위해 ELB는 주기적으로 (기본 30초 간격) 대상 그룹에 속해있는
각각의 EC2 인스턴스에 요청을 보내본다.
그 요청에 대한 200번대(HTTP Status Code) 응답이 잘 날라온다면 서버가 정상적으로 잘 작동되고 있다고 판단한다.
만약 요청을 보냈는데 200번대 응답이 날라오지 않는다면 서버가 고장났다고 판단해서, ELB가 고장났다고 판단한 EC2 
인스턴스로는 요청(트래픽)을 보내지 않는다.

이러한 작동과정을 통해 조금 더 효율적인 요청의 분배가 가능하다.
ex)
상태 검사 프로토콜 : HTTP
상태 검사 경로 : /health 
위 설정 값을 해석하면, 대상 그룹의 각각의 EC2 인스턴스에 GET /health 로 요청을 보내게끔 설정한 것이다.
정상적인 헬스 체크 기능을 위해 EC2 인스턴스에서 작동하고 있는 백엔드 서버에 Health Check용 API를 만들어야 한다.

5. 대상 등록 
> ELB 생성창에 돌아와 대상 그룹으로 생성한 그룹을 등록한다.
해당 셋팅을 해석하면 ELB 에 HTTP를 활용해 80 포트로 들어온 요청(트래픽)을 설정한 대상 그룹으로 전달하겠다는 의미이다.

6. 나머지 옵션들을 그대로 두고 로드 밸런서를 생성한다.

※ Health Check API 추가하기.
app.js
const express = require('express');
const app = express();
const port = 80;

app.get('/', (req, res) => {
  res.send(`Hello World!`);
})

// GET /health 요청에 대해 상태코드 200으로 응답하는 API
app.get('/health', (req, res) => {
  res.status(200).send("Success Heatlth Check");
})

app.listen(port, () => {
  console.log(`Example app listening on port ${port}`)
})

해당 소스를 업데이트 후, EC2 인스턴스의 서버를 업데이트 시켜준다.

7.테스트 
로드 밸런서의 DNS name 에 나온 주소를 통해 서버에 접속을 테스트 한다.
DNS name/health  로도 접속 테스트를 해본다.

4장. ELB에 도메인 연결하기
Route 53에서 EC2에 연결되어 있던 레코드 삭제
Route 53에서 ELB 에 도메인 연결
레코드 유형 - A
별칭 체크 (Y)
트래픽 라우팅 대상 > Application/Classic Load Balancer에 대한 별칭
                             대상 리전(서울)
                             생성해둔 로드 밸런서 주소 (체크)

